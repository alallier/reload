#!/usr/bin/env node

var program = require('commander')
  , ON_DEATH = require('death')()
  , supervisor = require('supervisor')
  , path = require('path')
  , os = require('os')
  , fs = require('fs')
  , clc = require('cli-color')

program.version(require('../package.json').version)
  .option('-b, --browser', 'Open in the browser automatically.')
  .option('-n, --hostname [hostname]', 'If -b flag is being used, this allows for custom hostnames. Defaults to localhost.', 'localhost')
  .option('-d, --dir [dir]', 'The directory to serve up. Defaults to current dir.', process.cwd())
  .option('-p, --port [port]', 'The port to bind to. Can be set with PORT env variable as well. Defaults to 8080', '8080')
  .option('-s, --start-page [start-page]', 'Specify a start page. Defaults to index.html', 'index.html')
  .option('-v, --verbose [verbose]', 'Turning on logging on the server and client side. Defaults to false', false)
  .option('-w, --watch [watchItems]', 'A comma-delimited list of folders to watch for changes. Defaults to \'.\'', '.')
  .option('-e, --exts [extensions]', 'Extensions to watch, separated by commas or pipes. Defaults to html,js,css.', 'html|js|css')
  .option('-p, --poll-interval [milliseconds]',  'How often to poll watched files for changes. Defaults to 1000.', 1000)
  .option('--force-watch', 'Use fs.watch instead of fs.watchFile. This may be useful if you see a high cpu load on a windows machine.')
  .parse(process.argv)

var runFile = path.join(os.tmpdir(), 'reload-' + Math.random().toString().slice(2))
var serverFile = path.join(__dirname, '../lib/reload-server.js')

// replace commas for pipes, that's what supervisor likes.
if (program.exts.indexOf(','))
  program.exts = program.exts.replace(/\,/g,'|')

if (program.watch.indexOf(','))
  program.watch = program.watch.replace(/\,/g,'|')

var supervisorArgs = [
  '-q',
  '-w',
  program.watch,
  '-e',
  program.exts,
  '-p',
  program.pollInterval,
]

if (program.forceWatch)
  supervisorArgs.push('--force-watch')

var reloadArgs = [
  '--',
  serverFile,
  program.port,
  program.dir,
  !!program.browser,
  program.hostname,
  runFile,
  program.startPage,
  program.verbose
]

var args = supervisorArgs.concat(reloadArgs)

supervisor.run(args)

console.log("\nReload web server:")
console.log("listening on port " + clc.blue.bold(program.port))
console.log("serving dir " + clc.green.bold(program.dir))
console.log("monitoring changes on " + clc.green.bold(program.watch))
