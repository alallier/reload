#!/usr/bin/env node

var filterMaker = require('../lib/filterMaker.function')
var reload = require('../lib/reload')
var path = require('path')
var isAbsolute = require('./isPathAbsolute.function')
var log = require('../lib/log.function')
var test = process.argv.indexOf('--test')>=0

var help = process.argv.indexOf('-h')>=0
if(!help)help = process.argv.indexOf('--help')>=0
if(help)runHelp()

function runHelp(){
  console.log()
  console.log('  Usage: reload [options]')
  console.log()
  console.log('  Options:')
  console.log('    -b, --browser', 'Open in the browser automatically.')
  console.log('    -n, --hostname [hostname]', 'If -b flag is being used, this allows for custom hostnames. Defaults to localhost.')
  console.log('    -d, --dir [dir]', 'The directory to serve up. Defaults to current dir.')
  console.log('    -e, --exts [extensions]', 'Extensions separated by commas or pipes. Defaults to html,js,css.')
  console.log('    -p, --port [port]', 'The port to bind to. Can be set with PORT env variable as well. Defaults to 8080')
  console.log('    -s, --start-page [start-page]', 'Specify a start page. Defaults to index.html')
  console.log('    -v, --verbose [verbose]', 'Turning on logging on the server and client side. Defaults to true')
  console.log()
  process.exit()
}

var options = {log:log}

var dirArgIndex = process.argv.indexOf('-d')
if(!dirArgIndex<0)dirArgIndex = process.argv.indexOf('--dir')
var dir = dirArgIndex>=0 ? process.argv[dirArgIndex+1] : process.cwd()
if(!isAbsolute(dir)){
  dir = path.join(process.cwd(), dir)
}

options.browser = process.argv.indexOf('-b')>=0
if(!options.browser)options.browser = process.argv.indexOf('--browser')>=0

var hostArgIndex = process.argv.indexOf('-n')
if(hostArgIndex<0)hostArgIndex = process.argv.indexOf('--hostname')
options.hostname = hostArgIndex>=0 ? process.argv[hostArgIndex+1] : 'localhost'

var portArgIndex = process.argv.indexOf('-p')
if(portArgIndex<0)portArgIndex = process.argv.indexOf('--port')
options.port = portArgIndex>=0 ? process.argv[portArgIndex+1] : getDefaultPort()

var startPageArgIndex = process.argv.indexOf('-s')
if(startPageArgIndex<0)startPageArgIndex = process.argv.indexOf('--start-page')
options.startPage = startPageArgIndex>=0 ? process.argv[startPageArgIndex+1] : ''

var extsArgIndex = process.argv.indexOf('-e')
if(extsArgIndex<0)extsArgIndex = process.argv.indexOf('--exts')
options.exts = extsArgIndex>=0 ? process.argv[extsArgIndex+1] : 'js,css,html'
options.filter = filterMaker.apply(filterMaker, options.exts.replace(/\|/g,',').split(','))

var verboseArgIndex = process.argv.indexOf('-v')
if(verboseArgIndex<0)verboseArgIndex = process.argv.indexOf('--verbose')
var verbose = verboseArgIndex>=0 ? JSON.parse(process.argv[verboseArgIndex+1]) : true

if(!verbose){
  options.log = function(){}
}

reload(dir,options)

if(verbose){
  log("Reload web server:")
  log("listening on port " + options.port)
  log("monitoring dir " + dir)
}

function getDefaultPort(){
  if(process.env.NODE_ENV&&process.env.NODE_ENV.PORT)return process.env.NODE_ENV.PORT
  return 8080
}

if(test){
  log('test mode on')
  setTimeout(function(){
    log('closing test')
    process.exit()
  }, 5000)
}